package views;

import controllers.CtrlSettings;
import controllers.CtrlSmallvilleClock;

/** World Clocks {@code JPanel} for the Mini Mode Window
 * @author Clark - ClarkCodes
 * @since 1.0
 */
public class IfrmWorldClocksMiniMode extends javax.swing.JPanel
{
    CtrlSmallvilleClock clocksManager;
    private int navigationIndex = -1;
    /** Creates new form IfrmWorldClocksMiniMode */
    public IfrmWorldClocksMiniMode ()
    {
        initComponents();
        clocksManager = CtrlSmallvilleClock.getController();
        // TODO: SET ICONS ON BUTTONS
        btnMiniNextWC.setIcon( CtrlSettings.getController().getNextIcon() );
        btnMiniPreviousWC.setIcon( CtrlSettings.getController().getPreviousIcon() );
        btnMiniNextWC.setToolTipText( CtrlSettings.getLanguageBundle().getString( "key_next_world_clock" ) );
        btnMiniPreviousWC.setToolTipText( CtrlSettings.getLanguageBundle().getString( "key_previous_world_clock" ) );
        labelsSetter();
        btnMiniNextWC.setEnabled( !clocksManager.getWorldClocks().isEmpty() );
        lblMiniZone.setText( clocksManager.zoneIdNamePreparer( clocksManager.getSystemWorldClock().getRegionZone() ) );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        btnMiniPreviousWC = new javax.swing.JButton();
        btnMiniNextWC = new javax.swing.JButton();
        lblMiniWC = new javax.swing.JLabel();
        lblMiniZone = new javax.swing.JLabel();
        lblMiniDate = new javax.swing.JLabel();

        btnMiniPreviousWC.setEnabled(false);
        btnMiniPreviousWC.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnMiniPreviousWCActionPerformed(evt);
            }
        });

        btnMiniNextWC.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnMiniNextWCActionPerformed(evt);
            }
        });

        lblMiniWC.setFont(new java.awt.Font("Exo", 0, 16)); // NOI18N
        lblMiniWC.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMiniWC.setText("00:00");

        lblMiniZone.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblMiniZone.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMiniZone.setText("Zone");

        lblMiniDate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblMiniDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMiniDate.setText("00/00/00");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnMiniPreviousWC, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMiniZone, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblMiniWC, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblMiniDate, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMiniNextWC, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnMiniNextWC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnMiniPreviousWC, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblMiniZone, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblMiniWC)
                        .addComponent(lblMiniDate)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnMiniNextWCActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnMiniNextWCActionPerformed
    {//GEN-HEADEREND:event_btnMiniNextWCActionPerformed
        if ( navigationIndex > -1 )
        {
            clocksManager.getWorldClocks().get( navigationIndex ).setMiniModeOnFront( false );            
        }
        else
            clocksManager.getSystemWorldClock().setMiniModeOnFront( false );
        
        navigationIndex++;
        
        clocksManager.getWorldClocks().get( navigationIndex ).setMiniModeOnFront( true );
        lblMiniWC.setText( clocksManager.getWorldClocks().get( navigationIndex ).getCurrentClockTime() );
        lblMiniZone.setText( clocksManager.zoneIdNamePreparer( clocksManager.getWorldClocks().get( navigationIndex ).getRegionZone() ) );
        navigationButtonsEnablingVerifier();
    }//GEN-LAST:event_btnMiniNextWCActionPerformed

    private void btnMiniPreviousWCActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnMiniPreviousWCActionPerformed
    {//GEN-HEADEREND:event_btnMiniPreviousWCActionPerformed
        clocksManager.getWorldClocks().get( navigationIndex ).setMiniModeOnFront( false );
         
        navigationIndex--;

        if ( navigationIndex > -1 )
        {
            clocksManager.getWorldClocks().get( navigationIndex ).setMiniModeOnFront( true );
            lblMiniWC.setText( clocksManager.getWorldClocks().get( navigationIndex ).getCurrentClockTime() );
            lblMiniZone.setText( clocksManager.zoneIdNamePreparer( clocksManager.getWorldClocks().get( navigationIndex ).getRegionZone() ) );
        }
        else
        {
            clocksManager.getSystemWorldClock().setMiniModeOnFront( true );
            lblMiniWC.setText( clocksManager.getSystemWorldClock().getCurrentClockTime() );
            lblMiniZone.setText( clocksManager.zoneIdNamePreparer( clocksManager.getSystemWorldClock().getRegionZone() ) );
        }
        
        navigationButtonsEnablingVerifier();
    }//GEN-LAST:event_btnMiniPreviousWCActionPerformed

    public final void labelsSetter()
    {
        clocksManager.getSystemWorldClock().setClockLabel( lblMiniWC );
        clocksManager.getSystemWorldClock().setDateLabel( lblMiniDate );
        clocksManager.getSystemWorldClock().setZoneLabel( lblMiniZone );
        clocksManager.getSystemWorldClock().setMiniModeOnFront( true );
        clocksManager.getWorldClocks().forEach( wc -> 
        {
            wc.setClockLabel( lblMiniWC );
            wc.setDateLabel( lblMiniDate );
            wc.setZoneLabel( lblMiniZone );
        } );
    }
    
    private void navigationButtonsEnablingVerifier()
    {
        if ( navigationIndex == -1 )
        {
            if ( btnMiniPreviousWC.isEnabled() )
                btnMiniPreviousWC.setEnabled( false );
        }
        else
        {
            if ( !btnMiniPreviousWC.isEnabled() )
                btnMiniPreviousWC.setEnabled( true );
        }
        
        if ( navigationIndex == CtrlSmallvilleClock.getController().getWorldClocks().size() -1 )
        {
            if ( btnMiniNextWC.isEnabled() )
                btnMiniNextWC.setEnabled( false );
        }
        else
        {
            if ( !btnMiniNextWC.isEnabled() )
                btnMiniNextWC.setEnabled( true );
        }
    }
    
    public void updateCurrentOnfrontState()
    {
        if ( navigationIndex > -1 )
        {
            clocksManager.getWorldClocks().get( navigationIndex ).setMiniModeOnFront( false );
        }
        else
            clocksManager.getSystemWorldClock().setMiniModeOnFront( false );
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMiniNextWC;
    private javax.swing.JButton btnMiniPreviousWC;
    private javax.swing.JLabel lblMiniDate;
    private javax.swing.JLabel lblMiniWC;
    private javax.swing.JLabel lblMiniZone;
    // End of variables declaration//GEN-END:variables
}
