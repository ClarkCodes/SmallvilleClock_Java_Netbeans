package views;

import controllers.CommonUtils;
import controllers.CtrlSettings;
import controllers.CtrlSmallvilleClock;
import javax.swing.JLabel;

/** Timer {@code JPanel} for the Mini Mode Window
 * @author Clark - ClarkCodes
 * @since 1.0
 */
public class IfrmTimerMiniMode extends javax.swing.JPanel
{
    CtrlSettings ctrlSettings;
    CtrlSmallvilleClock clocksManager;
    DlgSetTimer setTimerWindow;
    
    /** Creates new form IfrmTimerMiniMode */
    public IfrmTimerMiniMode ()
    {
        initComponents();
        ctrlSettings = CtrlSettings.getController();
        clocksManager = CtrlSmallvilleClock.getController();
        clocksManager.getTimer().setTimerLabel( lblMiniTimer );
        
        if ( clocksManager.getTimer().getState() != CommonUtils.State.RUNNING )
            lblMiniTimer.setText( CommonUtils.getFormattedDuration( clocksManager.getTimer().getTickingTime(), CommonUtils.ChronoType.TIMER_TIME ) );
        
        btnMiniSetTime.setToolTipText( CtrlSettings.getLanguageBundle().getString( "key_set_timer" ) );
        btnMiniSetTime.setIcon( ctrlSettings.getTimerMiniIcon() );
        btnMiniCancelTimer.setIcon( ctrlSettings.getStopCancelIcon() );
        btnMiniCancelTimer.setToolTipText( CtrlSettings.getLanguageBundle().getString( "key_cancel" ) );
        timerButtonsIconsNamesSetter();
        timerEnablingVerifier();
    }

    public DlgSetTimer getSetTimerWindow ()
    {
        return setTimerWindow;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        btnMiniSetTime = new javax.swing.JButton();
        btnMiniCancelTimer = new javax.swing.JButton();
        btnMiniStartPauseTimer = new javax.swing.JButton();
        lblMiniTimer = new javax.swing.JLabel();
        lblMiniTimerName = new javax.swing.JLabel();

        btnMiniSetTime.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnMiniSetTimeActionPerformed(evt);
            }
        });

        btnMiniCancelTimer.setEnabled(false);
        btnMiniCancelTimer.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnMiniCancelTimerActionPerformed(evt);
            }
        });

        btnMiniStartPauseTimer.setEnabled(false);
        btnMiniStartPauseTimer.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnMiniStartPauseTimerActionPerformed(evt);
            }
        });

        lblMiniTimer.setFont(new java.awt.Font("Exo", 1, 16)); // NOI18N
        lblMiniTimer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMiniTimer.setText("00:00:00");

        lblMiniTimerName.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(120, Short.MAX_VALUE)
                .addComponent(lblMiniTimer, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMiniTimerName, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMiniStartPauseTimer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMiniCancelTimer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMiniSetTime, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnMiniSetTime, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(lblMiniTimer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnMiniStartPauseTimer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnMiniCancelTimer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblMiniTimerName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public JLabel getMiniTimerLabel()
    {
        return lblMiniTimer;
    }
    
    private void btnMiniSetTimeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnMiniSetTimeActionPerformed
    {//GEN-HEADEREND:event_btnMiniSetTimeActionPerformed
        setTimerWindow = new DlgSetTimer( CommonUtils.getMiniWindow(), true, lblMiniTimer, lblMiniTimerName );
        setTimerWindow.setVisible( true );
    }//GEN-LAST:event_btnMiniSetTimeActionPerformed

    private void btnMiniCancelTimerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnMiniCancelTimerActionPerformed
    {//GEN-HEADEREND:event_btnMiniCancelTimerActionPerformed
        CommonUtils.getMainFrame().getBtnTimerCancel().doClick();
        btnMiniCancelTimer.setEnabled( false );
        timerButtonsIconsNamesSetter();
    }//GEN-LAST:event_btnMiniCancelTimerActionPerformed

    private void btnMiniStartPauseTimerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnMiniStartPauseTimerActionPerformed
    {//GEN-HEADEREND:event_btnMiniStartPauseTimerActionPerformed
        CommonUtils.getMainFrame().getBtnTimerStartPauseResume().doClick();
        
        if ( clocksManager.getTimer().getState() == CommonUtils.State.RUNNING )
            if ( !btnMiniCancelTimer.isEnabled() )
                btnMiniCancelTimer.setEnabled( true );
        
        timerButtonsIconsNamesSetter();
    }//GEN-LAST:event_btnMiniStartPauseTimerActionPerformed

    public final void timerButtonsIconsNamesSetter()
    {
        btnMiniStartPauseTimer.setToolTipText( switch ( clocksManager.getTimer().getState() )
        {
            case STOPPED -> CtrlSettings.getLanguageBundle().getString( "key_start" );
            case RUNNING -> CtrlSettings.getLanguageBundle().getString( "key_pause" );
            case PAUSED -> CtrlSettings.getLanguageBundle().getString( "key_resume" );
        } );
        
        btnMiniStartPauseTimer.setIcon( 
                clocksManager.getTimer().getState() == CommonUtils.State.RUNNING ?
                        ctrlSettings.getPauseIcon() :
                        ctrlSettings.getPlayStartResumeIcon() );
    }

    public final void timerEnablingVerifier()
    {
        if ( clocksManager.getTimer().getTimeSet().isZero() )
        {
            if( btnMiniStartPauseTimer.isEnabled() )
                btnMiniStartPauseTimer.setEnabled( false );
            
            if( btnMiniCancelTimer.isEnabled() )
                btnMiniCancelTimer.setEnabled( false );
        }
        else
        {
            if( !btnMiniStartPauseTimer.isEnabled() )
                btnMiniStartPauseTimer.setEnabled( true );
        }
        
        if ( clocksManager.getTimer().getState() == CommonUtils.State.STOPPED )
        {   
            if( btnMiniCancelTimer.isEnabled() )
                btnMiniCancelTimer.setEnabled( false );
        }
        else
            if( !btnMiniCancelTimer.isEnabled() )
                btnMiniCancelTimer.setEnabled( true );
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMiniCancelTimer;
    private javax.swing.JButton btnMiniSetTime;
    private javax.swing.JButton btnMiniStartPauseTimer;
    private javax.swing.JLabel lblMiniTimer;
    private javax.swing.JLabel lblMiniTimerName;
    // End of variables declaration//GEN-END:variables
}
