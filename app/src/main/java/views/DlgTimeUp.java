package views;

import controllers.CommonUtils;
import controllers.CtrlSettings;
import controllers.CtrlSmallvilleClock;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.time.Duration;
import javax.swing.UIManager;
import models.Timer;
import models.TimerSound;

/** Window that awares that the Timer's time is up
 * @author Clark - ClarkCodes
 * @since 1.0
 */
public class DlgTimeUp extends javax.swing.JDialog
{   
    private final Timer timer;
    private final javax.swing.Timer timerTicker;
    private final TimerSound timerSound;
    private Duration overTime = Duration.ZERO;
    private boolean closed = false;

    /** Creates new TimeUp {@code JDialog} window
     * @param parent This {@code JDialog} parent
     * @param modal This {@code JDialog} modal indicator
     * @param timerName The name set on the timer when calling this {@code }JDialog
     * @see javax.swing.JDialog
     * @see models.Timer
     * @see models.TimerSound
     */
    public DlgTimeUp ( java.awt.Frame parent, boolean modal, String timerName )
    {
        super( parent, modal );
        initComponents();
        setLocationRelativeTo( null );
        lblOverTime.setForeground( UIManager.getColor( "Component.accentColor" ) );
        updateComponentsLanguage();
        timer  = CtrlSmallvilleClock.getController().getTimer();
        timerSound = new TimerSound( CtrlSettings.getController().getTimerSound() );
        timerSound.start();
        
        if ( !timerName.isBlank() )
            lblTimerName.setText( timerName );
        
        ActionListener timeUpdater = new ActionListener() 
        {
            @Override
            public void actionPerformed( ActionEvent evt) 
            {
                if( overTime.toSeconds() < 300 )
                {
                    overTime = overTime.plusSeconds( Long.valueOf( 1 ) );
                    lblOverTime.setText( "-" + CommonUtils.getFormattedDuration( overTime, CommonUtils.ChronoType.TIMER_OVER_TIME ) );
                }
                else
                {
                    lblOverTime.setText( lblOverTime.getText() + "+" );
                    timerTicker.stop();
                    timerSound.terminate();
                }
            }
        };
        
        this.timerTicker = new javax.swing.Timer( CommonUtils.getMILLIS_IN_SECOND(), timeUpdater );
        this.timerTicker.start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        lblTimeIsUp = new javax.swing.JLabel();
        lblTimerName = new javax.swing.JLabel();
        btnReset = new javax.swing.JButton();
        lblOverTime = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("i18n/i18nBundle_es"); // NOI18N
        setTitle(bundle.getString("key_time_up_title")); // NOI18N
        setAlwaysOnTop(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosed(java.awt.event.WindowEvent evt)
            {
                formWindowClosed(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                formKeyReleased(evt);
            }
        });

        lblTimeIsUp.setFont(new java.awt.Font("Segoe UI Semibold", 0, 48)); // NOI18N
        lblTimeIsUp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTimeIsUp.setText(bundle.getString("key_time_up")); // NOI18N

        lblTimerName.setFont(new java.awt.Font("Segoe UI Semibold", 0, 36)); // NOI18N
        lblTimerName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTimerName.setText("*");

        btnReset.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        btnReset.setText(bundle.getString("key_reset")); // NOI18N
        btnReset.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnResetActionPerformed(evt);
            }
        });

        lblOverTime.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblOverTime.setText("-00:00");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTimeIsUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblOverTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblTimerName, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 81, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(204, 204, 204)
                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTimeIsUp)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTimerName)
                    .addComponent(lblOverTime))
                .addGap(18, 18, 18)
                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnResetActionPerformed
    {//GEN-HEADEREND:event_btnResetActionPerformed
        finishingSteps();
        dispose();
    }//GEN-LAST:event_btnResetActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosed
    {//GEN-HEADEREND:event_formWindowClosed
        if ( !closed )
            finishingSteps();
    }//GEN-LAST:event_formWindowClosed
    /** Common steps that are made when closing the dialog
     */
    private void finishingSteps()
    {
        timerSound.terminate();
        timer.reset();
        CommonUtils.getMainFrame().timerButtonsNamesSetter();
        CommonUtils.getMainFrame().timerEnablingVerifier();
        
        System.out.println( "Mode: " + CtrlSettings.getAppMode() );
        
        if ( CommonUtils.getMiniWindow() != null )
        {
            CommonUtils.getMiniWindow().getMiniTimerPanel().timerButtonsIconsNamesSetter();
            CommonUtils.getMiniWindow().getMiniTimerPanel().timerEnablingVerifier();
        }
        
        closed = true;
    }
    
    private void formKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_formKeyReleased
    {//GEN-HEADEREND:event_formKeyReleased
        if ( evt.getKeyCode() == KeyEvent.VK_ENTER || evt.getKeyCode() == KeyEvent.VK_ESCAPE )
        {
            finishingSteps();
            dispose();
        }
    }//GEN-LAST:event_formKeyReleased
    /** Updates the components language
     */
    private void updateComponentsLanguage()
    {
        setTitle( CtrlSettings.getLanguageBundle().getString( "key_time_up_title" ) );
        lblTimeIsUp.setText( CtrlSettings.getLanguageBundle().getString( "key_time_up" ) );
        btnReset.setText( CtrlSettings.getLanguageBundle().getString( "key_reset" ) );
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReset;
    private javax.swing.JLabel lblOverTime;
    private javax.swing.JLabel lblTimeIsUp;
    private javax.swing.JLabel lblTimerName;
    // End of variables declaration//GEN-END:variables
}
