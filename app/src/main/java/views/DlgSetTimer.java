package views;

import controllers.CommonUtils;
import controllers.CtrlSettings;
import controllers.CtrlSmallvilleClock;
import data.FilesManager;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.time.Duration;
import java.util.LinkedList;
import java.util.ResourceBundle;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.border.TitledBorder;
import models.PresetTimerTime;
import models.Timer;

/** Set Timer {@code JDialog} window
 * @author Clark - ClarkCodes
 * @since 1.0
 */
public class DlgSetTimer extends javax.swing.JDialog
{
    private final ResourceBundle langBundle;
    private final JLabel lblTimer, lblTimerName;
    private final CtrlSmallvilleClock clocksManager;
    private final FilesManager filesManager;
    private final int MAX_TIMER_PRESETS = 5;
    private final LinkedList<PresetTimerTime> presetTimers;
    private final Timer timer;
    
    /** Constructor - Creates a new {@code JDialog} DlgSetTimer 
     * 
     * @param parent       This Dialog parent
     * @param modal        Indicator to act or not in a modal wey
     * @param lblTimer     A given {@code JLabel} that corresponds to the main 
     *                     Timer label to set the time on it properly
     * @param lblTimerName A given {@code JLabel} that corresponds to the main 
     *                     Timer name label to set the time on it properly
     */
    public DlgSetTimer ( java.awt.Frame parent, boolean modal, JLabel lblTimer, JLabel lblTimerName )
    {
        super( parent, modal );
        initComponents();
        langBundle = CtrlSettings.getLanguageBundle();
        tableInitSetter();
        clocksManager = CtrlSmallvilleClock.getController();
        filesManager = FilesManager.getController();
        presetTimers = clocksManager.getPresetTimers();
        timer = clocksManager.getTimer();
        
        if ( CtrlSettings.getAppMode() == CtrlSettings.Mode.EXPANDED )
        {
            setLocation( Math.toIntExact( Math.round( parent.getLocationOnScreen().getX() - 70 ) ), Math.toIntExact( Math.round( parent.getLocationOnScreen().getY() + parent.getHeight() ) ) );
        }
        else
        {
            JFrame miniWindow = CommonUtils.getMiniWindow();
            setLocation( Math.toIntExact( Math.round( miniWindow.getLocationOnScreen().getX() - 70 ) ), Math.toIntExact( Math.round( miniWindow.getLocationOnScreen().getY() + miniWindow.getHeight() ) ) );
        }
        
        setTitle( langBundle.getString( "key_set_timer" ) );
        this.lblTimer = lblTimer;
        this.lblTimerName = lblTimerName;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel5 = new javax.swing.JLabel();
        sliderMinutes = new javax.swing.JSlider();
        btnSetTime = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        sliderSeconds = new javax.swing.JSlider();
        sliderHours = new javax.swing.JSlider();
        lblName = new javax.swing.JLabel();
        txtTimerName = new javax.swing.JTextField();
        lblHoursValue = new javax.swing.JLabel();
        lblMinutesValue = new javax.swing.JLabel();
        lblSecondsValue = new javax.swing.JLabel();
        btnAddTimerPreset = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTimerPresets = new javax.swing.JTable();

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("00:00:00");
        jLabel5.setAlignmentX(0.5F);
        jLabel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nombre del Timer", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 16))); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowOpened(java.awt.event.WindowEvent evt)
            {
                formWindowOpened(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                formKeyReleased(evt);
            }
        });

        sliderMinutes.setMaximum(59);
        sliderMinutes.setMinorTickSpacing(1);
        sliderMinutes.setOrientation(javax.swing.JSlider.VERTICAL);
        sliderMinutes.setPaintLabels(true);
        sliderMinutes.setPaintTicks(true);
        sliderMinutes.setSnapToTicks(true);
        sliderMinutes.setToolTipText("");
        sliderMinutes.setValue(0);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("i18n/i18nBundle_es"); // NOI18N
        sliderMinutes.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), bundle.getString("key_minutes"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Segoe UI", 0, 16))); // NOI18N
        sliderMinutes.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                sliderMinutesStateChanged(evt);
            }
        });

        btnSetTime.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        btnSetTime.setText(bundle.getString("key_set")); // NOI18N
        btnSetTime.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnSetTimeActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        btnCancel.setText(bundle.getString("key_cancel")); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCancelActionPerformed(evt);
            }
        });

        sliderSeconds.setMaximum(59);
        sliderSeconds.setMinorTickSpacing(1);
        sliderSeconds.setOrientation(javax.swing.JSlider.VERTICAL);
        sliderSeconds.setPaintLabels(true);
        sliderSeconds.setPaintTicks(true);
        sliderSeconds.setSnapToTicks(true);
        sliderSeconds.setToolTipText("");
        sliderSeconds.setValue(0);
        sliderSeconds.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), bundle.getString("key_seconds"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Segoe UI", 0, 16))); // NOI18N
        sliderSeconds.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                sliderSecondsStateChanged(evt);
            }
        });

        sliderHours.setMaximum(99);
        sliderHours.setMinorTickSpacing(1);
        sliderHours.setOrientation(javax.swing.JSlider.VERTICAL);
        sliderHours.setPaintLabels(true);
        sliderHours.setPaintTicks(true);
        sliderHours.setSnapToTicks(true);
        sliderHours.setToolTipText("");
        sliderHours.setValue(0);
        sliderHours.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), bundle.getString("key_hours"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Segoe UI", 0, 16))); // NOI18N
        sliderHours.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                sliderHoursStateChanged(evt);
            }
        });

        lblName.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        lblName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblName.setText(bundle.getString("key_name_tag")); // NOI18N

        txtTimerName.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N

        lblHoursValue.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblHoursValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHoursValue.setText("0");

        lblMinutesValue.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblMinutesValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMinutesValue.setText("0");

        lblSecondsValue.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblSecondsValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSecondsValue.setText("0");

        btnAddTimerPreset.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        btnAddTimerPreset.setToolTipText(bundle.getString("key_set_timer")); // NOI18N
        btnAddTimerPreset.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnAddTimerPresetActionPerformed(evt);
            }
        });

        tblTimerPresets.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        tblTimerPresets.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {

            }
        ));
        tblTimerPresets.setRowHeight(50);
        tblTimerPresets.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblTimerPresets.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                tblTimerPresetsMouseClicked(evt);
            }
        });
        tblTimerPresets.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                tblTimerPresetsKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblTimerPresets);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lblHoursValue, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sliderHours, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMinutesValue, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sliderMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSecondsValue, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sliderSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTimerName)
                            .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnAddTimerPreset, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(btnSetTime, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sliderHours, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sliderSeconds, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sliderMinutes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(205, 205, 205)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblSecondsValue)
                                    .addComponent(lblHoursValue)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(lblName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTimerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(205, 205, 205)
                                .addComponent(lblMinutesValue)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddTimerPreset, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSetTime, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Sets the Timer Presets {@code DefaultTableModel} table structure
     */
    private void tableInitSetter()
    {   // Table Sounds List
        tblTimerPresets.setModel( new javax.swing.table.DefaultTableModel (
            new Object [][]
            {

            },
            new String []
            {
                langBundle.getString( "key_timer_preset" )
            }
        )
        {
            Class[] types = new Class []
            {
                JLabel.class
            };
            boolean[] canEdit = new boolean []
            {
                false
            };

            public Class getColumnClass( int columnIndex )
            {
                return types [columnIndex];
            }

            public boolean isCellEditable( int rowIndex, int columnIndex )
            {
                return canEdit [columnIndex];
            }
        });
    }
    
    private void btnSetTimeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnSetTimeActionPerformed
    {//GEN-HEADEREND:event_btnSetTimeActionPerformed
        Duration timerDuration = getDurationSet();

        if ( timerDuration.isZero() && !timer.getTimeSet().isZero() )
        {
            timer.setTimeSet( Duration.ZERO );
            timer.setName( "" );
        }
        else
        {
            if ( timerDuration.toSeconds() != timer.getTimeSet().toSeconds() )
                timer.setTimeSet( timerDuration );

            if ( !txtTimerName.getText().equals( timer.getName() ) )
                timer.setName( txtTimerName.getText() );
        }
        
        lblTimer.setText( CommonUtils.getFormattedDuration( timer.getTimeSet(), CommonUtils.ChronoType.TIMER_TIME ) );
        lblTimerName.setText( timer.getName() );
        CommonUtils.getMainFrame().timerEnablingVerifier();
        
        if ( CtrlSettings.getAppMode() == CtrlSettings.Mode.MINI_MODE )
        {
            FrmMiniMode miniWindow = CommonUtils.getMiniWindow();
            if ( miniWindow != null )
            {
                miniWindow.getMiniTimerPanel().getMiniTimerLabel().setText( CommonUtils.getFormattedDuration( timer.getTimeSet(), CommonUtils.ChronoType.TIMER_TIME ) );
                miniWindow.getMiniTimerPanel().timerEnablingVerifier();
                //miniWindow.getMiniTimerPanel().timerButtonsIconsNamesSetter();
            }
        }
        
        dispose();
    }//GEN-LAST:event_btnSetTimeActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnCancelActionPerformed
    {//GEN-HEADEREND:event_btnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowOpened
    {//GEN-HEADEREND:event_formWindowOpened
        sliderHours.setBorder( new TitledBorder ( 
                BorderFactory.createTitledBorder( BorderFactory.createEmptyBorder() ), 
                langBundle.getString( "key_hours" ), 
                TitledBorder.CENTER, 
                TitledBorder.ABOVE_TOP,
                new Font( "Segoe UI", Font.PLAIN, 16 ) ) );
        
        sliderMinutes.setBorder( new TitledBorder ( 
                BorderFactory.createTitledBorder( BorderFactory.createEmptyBorder() ), 
                langBundle.getString( "key_minutes" ), 
                TitledBorder.CENTER, 
                TitledBorder.ABOVE_TOP,
                new Font( "Segoe UI", Font.PLAIN, 16 ) ) );

        sliderSeconds.setBorder( new TitledBorder ( 
                BorderFactory.createTitledBorder( BorderFactory.createEmptyBorder() ), 
                langBundle.getString( "key_seconds" ), 
                TitledBorder.CENTER, 
                TitledBorder.ABOVE_TOP,
                new Font( "Segoe UI", Font.PLAIN, 16 ) ) );
        
        lblName.setText( langBundle.getString( "key_name_tag" ) );
        btnSetTime.setText( langBundle.getString( "key_set" ) );
        btnCancel.setText( langBundle.getString( "key_cancel" ) );
        btnAddTimerPreset.setToolTipText( langBundle.getString( "key_add_timer_preset" ) );
        
        setTimeOnControls( timer.getTimeSet(), timer.getName() ); // Loading the time that is currently on the Timer
        
        if ( !presetTimers.isEmpty() ) // Filling the table if there are presets saved
            clocksManager.fillTimerPresetsTable( tblTimerPresets );

        this.btnAddTimerPreset.setIcon( CtrlSettings.getController().getAddTimerIcon() );
        addTimerPresetEnablingVerifier();
    }//GEN-LAST:event_formWindowOpened

    private void sliderHoursStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_sliderHoursStateChanged
    {//GEN-HEADEREND:event_sliderHoursStateChanged
        lblHoursValue.setText( sliderHours.getValue() + "" );
        addTimerPresetEnablingVerifier();
    }//GEN-LAST:event_sliderHoursStateChanged

    private void sliderMinutesStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_sliderMinutesStateChanged
    {//GEN-HEADEREND:event_sliderMinutesStateChanged
        lblMinutesValue.setText( sliderMinutes.getValue() + "" );
        addTimerPresetEnablingVerifier();
    }//GEN-LAST:event_sliderMinutesStateChanged

    private void sliderSecondsStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_sliderSecondsStateChanged
    {//GEN-HEADEREND:event_sliderSecondsStateChanged
        lblSecondsValue.setText( sliderSeconds.getValue() + "" );
        addTimerPresetEnablingVerifier();
    }//GEN-LAST:event_sliderSecondsStateChanged

    private void formKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_formKeyReleased
    {//GEN-HEADEREND:event_formKeyReleased
        if ( evt.getKeyCode() == KeyEvent.VK_ENTER )
        {
            btnSetTime.doClick();
        }
        else if ( evt.getKeyCode() == KeyEvent.VK_ESCAPE )
        {
            btnCancel.doClick();
        }
    }//GEN-LAST:event_formKeyReleased

    private void btnAddTimerPresetActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAddTimerPresetActionPerformed
    {//GEN-HEADEREND:event_btnAddTimerPresetActionPerformed
        Duration duration = getDurationSet();
        
        if ( !duration.isZero() && 
                presetTimers.size() < MAX_TIMER_PRESETS &&
                !clocksManager.timeExistsInPresets( duration ) )
        {
            if ( !txtTimerName.getText().isBlank() )
            {   // Adding the Preset to the collection
                presetTimers.add( new PresetTimerTime( CommonUtils.ChronoType.TIMER_TIME, 
                                duration, 
                                txtTimerName.getText() ) );

                // Adding the Preset visually filling the table
                clocksManager.fillTimerPresetsTable( tblTimerPresets );
                
                // Notifiying to the files manager that the preset timers collection has been modified, setting the indicator
                if ( !filesManager.isUserTimerPresetsListChanged() )
                    filesManager.setUserTimerPresetsListChanged( true );
            }
            else
            {
                JOptionPane.showMessageDialog( this, 
                        CtrlSettings.getLanguageBundle().getString( "key_preset_name_required_msj" ), 
                        CtrlSettings.getLanguageBundle().getString( "key_name_required_title" ), 
                        JOptionPane.WARNING_MESSAGE );
                txtTimerName.requestFocus();
            }
        }
        
        addTimerPresetEnablingVerifier();
    }//GEN-LAST:event_btnAddTimerPresetActionPerformed

    private void tblTimerPresetsMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblTimerPresetsMouseClicked
    {//GEN-HEADEREND:event_tblTimerPresetsMouseClicked
        if ( tblTimerPresets.getSelectedRow() != -1 )
        {
            PresetTimerTime selectedPreset = presetTimers.get( tblTimerPresets.getSelectedRow() );
            setTimeOnControls( selectedPreset.time(), selectedPreset.name() );
        }
    }//GEN-LAST:event_tblTimerPresetsMouseClicked

    private void tblTimerPresetsKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_tblTimerPresetsKeyReleased
    {//GEN-HEADEREND:event_tblTimerPresetsKeyReleased
        if ( evt.getKeyCode() == KeyEvent.VK_DELETE )
            deletePreset();
    }//GEN-LAST:event_tblTimerPresetsKeyReleased

    /** Deletes a Timer Preset from the user Timer presets collection and notifies
     * the indicator to update the persistent file to match properly
     */
    private void deletePreset()
    {
        if( tblTimerPresets.getSelectedRow() != -1 )
        {
            presetTimers.remove( tblTimerPresets.getSelectedRow() );
            clocksManager.fillTimerPresetsTable( tblTimerPresets );

            if ( !filesManager.isUserTimerPresetsListChanged() )
                filesManager.setUserTimerPresetsListChanged( true );
            
            addTimerPresetEnablingVerifier();
        }
    }
    /** Verifies key circumstances where the add timer preset button must be 
     * disabled or enabled and does it in consequence
     */
    private void addTimerPresetEnablingVerifier()
    {
        if ( presetTimers.size() == MAX_TIMER_PRESETS )
        {
            btnAddTimerPreset.setEnabled( false );
        }
        else if( sliderHours.getValue() == 0 &&
                sliderMinutes.getValue() == 0 &&
                sliderSeconds.getValue() == 0 )
        {
            btnAddTimerPreset.setEnabled( false );
        }
        else
            btnAddTimerPreset.setEnabled( true );
    }
    
    /** Gets the current {@code Duration} object from the slider components
     */
    private Duration getDurationSet()
    {
        return Duration.ofSeconds( Long.parseLong( ( ( sliderHours.getValue() * CommonUtils.getSECONDS_IN_HOUR() ) + ( sliderMinutes.getValue() * CommonUtils.getSECONDS_IN_MINUTE() ) + sliderSeconds.getValue() ) + "" ) );
    }

    /** Sets a specified time on the slider controls to be ready to se this time 
     * on the Timer
     * 
     * @param duration  A given {@code Duration} object to set its time on sliders
     * @param timerName A given {@code String} object with the Timer preset name
     *                  to set it on the Timer name {@code JTextField} component
     */
    private void setTimeOnControls( Duration duration, String timerName )
    {
        sliderHours.setValue( Integer.parseInt( duration.toHours() + "" ) );
        sliderMinutes.setValue( duration.toMinutesPart() );
        sliderSeconds.setValue( duration.toSecondsPart() );
        txtTimerName.setText( timerName );
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddTimerPreset;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSetTime;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblHoursValue;
    private javax.swing.JLabel lblMinutesValue;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblSecondsValue;
    private javax.swing.JSlider sliderHours;
    private javax.swing.JSlider sliderMinutes;
    private javax.swing.JSlider sliderSeconds;
    private javax.swing.JTable tblTimerPresets;
    private javax.swing.JTextField txtTimerName;
    // End of variables declaration//GEN-END:variables
}
